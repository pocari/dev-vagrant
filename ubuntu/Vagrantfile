# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "ubuntu1504"
  config.vm.box = "ubuntu/vivid64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = false
  
     # Customize the amount of memory on the VM:
     vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-'SHELL'
      echo root:vagrant | sudo chpasswd
     
      HOME=/home/vagrant

      sudo apt-get update
      sudo apt-get install -y \
        git \
        expect \
        luajit \
        libluajit-5.1-2 \
        libluajit-5.1-dev \
        zsh
      
      sudo apt-get build-dep -y vim
      
      #--------------------------------------------
      # vim install
      cd $HOME
      mkdir tmp
      cd tmp
      git clone https://github.com/vim/vim.git
      cd vim
      
      #sudo ln -s /usr/include/lua5.2 /usr/include/lua
      
      ./configure \
        --with-features=huge \
        --disable-darwin \
        --disable-selinux \
        --enable-multibyte \
        --enable-perlinterp \
        --enable-pythoninterp \
        --enable-rubyinterp \
        --enable-luainterp \
        --with-luajit \
        --enable-fail-if-missing
      
      sudo make install
      
      #--------------------------------------------
      # docker install
      sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
      
      sudo bash -c "echo deb https://apt.dockerproject.org/repo ubuntu-vivid main >> /etc/apt/sources.list.d/docker.list"
      sudo apt-get update
      sudo apt-get install -y \
              linux-image-extra-$(uname -r) \
              docker-engine
      
      sudo usermod -aG docker vagrant
      
      #----------------------------------------------
      # peco install
      cd $HOME/tmp
      wget https://github.com/peco/peco/releases/download/v0.3.5/peco_linux_amd64.tar.gz
      tar zxvf peco_linux_amd64.tar.gz
      sudo cp peco_linux_amd64/peco /usr/local/bin
      sudo chmod a+x /usr/local/bin/peco
      
      #----------------------------------------------
      # dotfiles
      cd $HOME/
      git clone https://github.com/pocari/dotfiles.git
      cd dotfiles
      bash setup.sh
      
      mkdir -p $HOME/.vim/bundle
      git clone https://github.com/Shougo/neobundle.vim $HOME/.vim/bundle/neobundle.vim
      
      #----------------------------------------------
      #change login shell
      chsh -s /usr/bin/zsh vagrant
      
      chown vagrant.vagrant -R /home/vagrant
  SHELL

  #require vagrant-hostsupdater plugin
  # config.vm.hostname = `hostname`.chomp.sub(/\..*$/, '') + "-vm01"
end
